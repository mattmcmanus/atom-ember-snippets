# Ember Functions snippets
#
# Examples
#
#  `ember<tab>`
#

'.source.js, .source.ts':
  'import Ember':
    'prefix': 'imE'
    'leftLabel': 'Ember'
    'body': """
      import Ember from 'ember';
      const { ${1} } = Ember;
    """

  'const {} = Ember':
    'prefix': 'cE'
    'leftLabel': 'Ember'
    'body': """
      const { ${1} } = Ember;
    """

  'run(() => { ... })':
    'prefix': 'run'
    'leftLabel': 'Ember'
    'body':"""
      run(() => {
      \t${1}
      });
    """
  #
  #
  # Ember Object Snippets
  #
  'let ... get(...)':
    'prefix': 'lget'
    'leftLabel': 'Ember'
    'body': 'let $1 = ${2:this}.get(\'$1\');'

  '.set(...)':
    'prefix': 'set'
    'leftLabel': 'Ember'
    'body': "${1:this}.set('${2}', ${3});"

  '.get(...)':
    'prefix': 'get'
    'leftLabel': 'Ember'
    'body': "${1:this}.get('${2}');"

  'this._super(...)':
    'prefix': 'super'
    'leftLabel': 'Ember'
    'body': 'this._super(...arguments);'

  'init() { ... }':
    'prefix': 'init'
    'leftLabel': 'Ember'
    'body':"""
      init() {
      \tthis._super(...arguments);
      \t${1}
      },
    """

  'service(...)':
    'prefix': 'service'
    'leftLabel': 'Ember'
    'body': 'service(${1}),'

  'service(...)':
    'prefix': 'service'
    'leftLabel': 'Ember'
    'body': 'service(${1}),'

  'computed(...)':
    'prefix': 'computed'
    'leftLabel': 'Ember'
    'body': """
      computed('${1:property}', function() {
      \t${2:// body}
      }),
    """

  'observer(...)':
    'prefix': 'observer'
    'leftLabel': 'Ember'
    'body': """
      observer('${1:property}', function() {
      \t${2:// body}
      }),
    """

  'on(...)':
    'prefix': 'on'
    'leftLabel': 'Ember'
    'body': """
      on('${1:property}', function() {
      \t${2:// body}
      }),
    """

  'actions: { ... }':
    'prefix': 'actions'
    'leftLabel': 'Ember'
    'body': """
      actions: {
      \t${1:// body}
      }
    """

  'computed.alias(...)':
    'prefix': 'alias'
    'leftLabel': 'Ember'
    'body': 'computed.alias(\'${2:property}\')',

  #
  #
  # Route Snippets
  #
  'Route: model(...) { ... }':
    'prefix': 'model'
    'leftLabel': 'Ember'
    'body': """
      model(params = {}) {
      \treturn this.store.query('${1}', params);
      },
    """

  'Route: setupController(...) { ... }':
    'prefix': 'setupController'
    'leftLabel': 'Ember'
    'body':"""
      setupController(controller, model) {
      \tthis._super(controller, model);
      \t${1}
      },

    """

  'Route: beforeModel(...) { ... }':
    'prefix': 'beforeModel'
    'leftLabel': 'Ember'
    'body':"""
      beforeModel(transition) {
      \tthis._super(controller, model);
      \t${1}
      },

    """

  'Route: afterModel(...) { ... }':
    'prefix': 'afterModel'
    'leftLabel': 'Ember'
    'body':"""
      afterModel(model, transition) {
      \tthis._super(controller, model);
      \t${1}
      },

    """

  #
  #
  # Component Snippets
  #
  'Component: didReceiveAttrs() { ... }':
    'prefix': 'didReceiveAttrs'
    'leftLabel': 'Ember'
    'body':"""
      didReceiveAttrs() {
      \tthis._super(...arguments);
      \t${1}
      },

    """

  'Component: didRender() { ... }':
    'prefix': 'didRender'
    'leftLabel': 'Ember'
    'body':"""
      didRender() {
      \tthis._super(...arguments);
      \t${1}
      },
    """

  'Component: didUpdateAttrs() { ... }':
    'prefix': 'didUpdateAttrs'
    'leftLabel': 'Ember'
    'body':"""
      didUpdateAttrs() {
      \tthis._super(...arguments);
      \t${1}
      },
    """

  'Component: willUpdate() { ... }':
    'prefix': 'willUpdate'
    'leftLabel': 'Ember'
    'body':"""
      willUpdate() {
      \tthis._super(...arguments);
      \t${1}
      },
    """

  'Component: didInsertElement() { ... }':
    'prefix': 'didInsertElement'
    'leftLabel': 'Ember'
    'body':"""
      didInsertElement() {
      \tthis._super(...arguments);
      \t${1}
      },
    """

  'Component: willDestroyElement() { ... }':
    'prefix': 'willDestroyElement'
    'leftLabel': 'Ember'
    'body':"""
      willDestroyElement() {
      \tthis._super(...arguments);
      \t${1}
      },
    """

  'Component: willClearElement() { ... }':
    'prefix': 'willClearElement'
    'leftLabel': 'Ember'
    'body':"""
      willClearElement() {
      \tthis._super(...arguments);
      \t${1}
      },
    """

  'Component: didDestroyElement() { ... }':
    'prefix': 'didDestroyElement'
    'leftLabel': 'Ember'
    'body':"""
      didDestroyElement() {
      \tthis._super(...arguments);
      \t${1}
      },
    """

  #
  #
  # Enumerables
  #
  '.filterBy(...)':
    'prefix': 'filter-by'
    'leftLabel': 'Ember'
    'body': "${1:enumerable}.filterBy('${2:property}', ${3:value});"

  '.mapBy(...)':
    'prefix': 'map-by'
    'leftLabel': 'Ember'
    'body': "${1:enumerable}.mapBy('${2:property}');"

  '.every(...)':
    'prefix': 'every'
    'leftLabel': 'Ember'
    'body': """
      ${1:enumerable}.every(function(${2:item}) {
      \t${3}
      });
    """

  '.isEvery(...)':
    'prefix': 'is-every'
    'leftLabel': 'Ember'
    'body': "${1:enumerable}.isEvery('${2:property}', ${3:bool});"

  '.some(...)':
    'prefix': 'some'
    'leftLabel': 'Ember'
    'body': """
      ${1:enumerable}.some(function(${2:item}) {
      \t${3}
      });
    """

  '.isAny(...)':
    'prefix': 'is-any'
    'leftLabel': 'Ember'
    'body': "${1:enumerable}.isAny('${2:property}', ${3:bool});"

  '.toArray(...)':
    'prefix': 'to-array'
    'leftLabel': 'Ember'
    'body': '${1:enumerable}.toArray();'

  '.get(\'firstObject\')':
    'prefix': 'first-object'
    'leftLabel': 'Ember'
    'body': "${1:enumerable}.get('firstObject');"

  '.get(\'lastObject\')':
    'prefix': 'last-object'
    'leftLabel': 'Ember'
    'body': "${1:enumerable}.get('lastObject');"

  #
  # Test Helpers
  #

  'visit(...)':
    'prefix': 'visit'
    'leftLabel': 'Ember'
    'body': "visit('${1:url}');"

  'fillIn(...)':
    'prefix': 'fill-in'
    'leftLabel': 'Ember'
    'body': "fillIn('${1:selector}', '${2:text}');"

  'click(...)':
    'prefix': 'click'
    'leftLabel': 'Ember'
    'body': "click('${1:selector}');"

  'keyEvent(...)':
    'prefix': 'key-event'
    'leftLabel': 'Ember'
    'body': "keyEvent('${1:selector}', '${2:type}', '${3:keyCode}');"

  'triggerEvent(...)':
    'prefix': 'trigger-event'
    'leftLabel': 'Ember'
    'body': "triggerEvent('${1:selector}', '${2:type}', '${3:options}');"

  'find(...)':
    'prefix': 'find-element'
    'leftLabel': 'Ember'
    'body': "find('${1:selector}', '${2:context}');"

  'await pauseTest(...)':
    'prefix': 'pause'
    'leftLabel': 'Ember'
    'body':"""
      await pauseTest();
    """

  'await wait(...)':
    'prefix': 'wait'
    'leftLabel': 'Ember'
    'body':"""
      await wait();
    """

  'andThen(...)':
    'prefix': 'and'
    'leftLabel': 'Ember'
    'body':"""
      andThen(() => {
      \t${1}
      });
    """
